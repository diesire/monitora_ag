SET DATABASE SQL SYNTAX ORA TRUE
SET DATABASE UNIQUE NAME HSQLDB3A0390C876
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REGULAR NAMES TRUE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE FALSE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL NULLS FIRST TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET DATABASE SQL LONGVAR IS LOB FALSE
SET DATABASE SQL SYNTAX ORA TRUE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET FILES WRITE DELAY 10
SET FILES BACKUP INCREMENT FALSE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 1
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 200
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT DBA TO SA
CREATE TABLE PUBLIC.AGENTE(AGENTE_ID INTEGER NOT NULL , ID_CLIENTE INTEGER NOT NULL , IP_AGENTE VARCHAR2 (15) , COMENTARIOS CLOB);
COMMENT ON COLUMN PUBLIC.AGENTE.IP_AGENTE IS 'IP del agente dentro de la red del cliente' ;
COMMENT ON COLUMN PUBLIC.AGENTE.COMENTARIOS IS 'Comentarios que se quieran hacer sobre el agente, tales como las credenciales para conectarse, lugar dónde está instalado, etc.' ;
CREATE INDEX AGENTE_CLI_FKX ON PUBLIC.AGENTE( ID_CLIENTE ASC) ;
ALTER TABLE PUBLIC.AGENTE ADD CONSTRAINT AGENTE_PK PRIMARY KEY ( AGENTE_ID ) ;
CREATE TABLE PUBLIC.AGENTE_DESTINO( ID_AGENTE INTEGER CONSTRAINT NNC_AGEN_DEST_ID_AGENTE NOT NULL , ID_CLIENTE INTEGER CONSTRAINT NNC_AGEN_DEST_ID_CLIENTE NOT NULL , ID_DESTINO INTEGER CONSTRAINT NNC_AGEN_DEST_ID_DESTINO NOT NULL);
CREATE INDEX AGEN_DEST_AGENTE_FKX ON PUBLIC.AGENTE_DESTINO( ID_AGENTE ASC) ;
CREATE INDEX AGEN_DEST_DEST_FKX ON PUBLIC.AGENTE_DESTINO( ID_CLIENTE ASC , ID_DESTINO ASC) ;
ALTER TABLE PUBLIC.AGENTE_DESTINO ADD CONSTRAINT AGENTE_DESTINO_PK PRIMARY KEY ( ID_AGENTE, ID_DESTINO, ID_CLIENTE ) ;
CREATE TABLE PUBLIC.CLIENTE( ID_CLIENTE INTEGER CONSTRAINT NNC_CLI_ID_CLIENTE NOT NULL , NOMBRE VARCHAR2 (1000) CONSTRAINT NNC_CLI_NOMBRE NOT NULL , LOGO BLOB);
ALTER TABLE PUBLIC.CLIENTE ADD CONSTRAINT CLIENTE_PK PRIMARY KEY ( ID_CLIENTE ) ;
CREATE TABLE PUBLIC.CONSULTA( CONS_ID INTEGER CONSTRAINT NNC_CONS_ID_CONSULTA NOT NULL , TIPO CHAR (1) CONSTRAINT NNC_CONS_TIPO NOT NULL , SQL_SELECT CLOB , TABLA CLOB , SQL_CREATE VARCHAR2 (4000) , COMANDO_SO VARCHAR2 (500) , DESC_CORTA VARCHAR2 (2000) CONSTRAINT NNC_CONS_DESC_CORTA NOT NULL , DESC_LARGA VARCHAR2 (4000) CONSTRAINT NNC_CONS_DESC_LARGA NOT NULL , F_ULTIMA_MODIFICACION DATE DEFAULT SYSDATE CONSTRAINT NNC_CONS_F_ULTIMA_MODIFICACION NOT NULL);
ALTER TABLE PUBLIC.CONSULTA ADD CONSTRAINT CONS_TIPO_CK CHECK ( TIPO IN ('B', 'S')) ;
COMMENT ON COLUMN PUBLIC.CONSULTA.TIPO IS 'Indica qué tipo de consulta es. B-->de base de datos, S-->de sistema operativo. Dependiendo del tipo se rellenarán unas u otras columnas del registro.' ;
COMMENT ON COLUMN PUBLIC.CONSULTA.TABLA IS 'nombre de la tabla asociada donde se guardará el resultado' ;
COMMENT ON COLUMN PUBLIC.CONSULTA.SQL_CREATE IS 'sql de creación de la tabla donde se almacenan los resultados para que el agente pueda crearla de forma automática' ;
ALTER TABLE PUBLIC.CONSULTA ADD CONSTRAINT CONSULTA_PK PRIMARY KEY ( CONS_ID ) ;
CREATE TABLE PUBLIC.CONSULTA_TIPO_DESTINO( ID_CONSULTA INTEGER CONSTRAINT NNC_ID_CONSULTA NOT NULL , ID_TIPO_DESTINO INTEGER CONSTRAINT NNC_ID_TIPO_DESTINO NOT NULL);
COMMENT ON TABLE PUBLIC.CONSULTA_TIPO_DESTINO IS 'Indica para qué tipo de destinos es aplicable una consulta' ;
CREATE INDEX CONS_TIPO_DEST_CONS_FKX ON PUBLIC.CONSULTA_TIPO_DESTINO( ID_CONSULTA ASC) ;
CREATE INDEX CONS_TIPO_DEST_TIPO_DEST_FKX ON PUBLIC.CONSULTA_TIPO_DESTINO( ID_TIPO_DESTINO ASC ) ;
ALTER TABLE PUBLIC.CONSULTA_TIPO_DESTINO ADD CONSTRAINT CONSULTA_TIPO_DESTINO_PK PRIMARY KEY ( ID_CONSULTA, ID_TIPO_DESTINO ) ;
CREATE TABLE PUBLIC.DESTINO( ID_CLIENTE INTEGER CONSTRAINT NNC_DEST_ID_CLIENTE NOT NULL , ID_DESTINO INTEGER CONSTRAINT NNC_DEST_ID_DESTINO NOT NULL , ID_TIPO_DESTINO INTEGER NOT NULL);
COMMENT ON TABLE PUBLIC.DESTINO IS 'Tabla que almacena los destinos/targets que se controlan en el sistema' ;
CREATE INDEX DESTINO_a_CLIENTE_FKX ON PUBLIC.DESTINO( ID_CLIENTE ASC) ;
CREATE INDEX DESTINO_a_TIPO_DESTINO_FKX ON PUBLIC.DESTINO( ID_TIPO_DESTINO ASC) ;
ALTER TABLE PUBLIC.DESTINO ADD CONSTRAINT DESTINO_PK PRIMARY KEY ( ID_CLIENTE, ID_DESTINO ) ;
CREATE TABLE PUBLIC.INFORME( INFO_ID INTEGER CONSTRAINT NNC_ID_INFORME NOT NULL , NOMBRE VARCHAR2 (1000) CONSTRAINT NNC_NOMBRE NOT NULL , DESC_LARGA VARCHAR2 (4000) CONSTRAINT NNC_DESC_LARGA NOT NULL , ID_PLAN INTEGER CONSTRAINT NNC_ID_PLAN NOT NULL , F_ULTIMA_MODIFICACION DATE DEFAULT SYSDATE CONSTRAINT NNC_F_ULTIMA_MODIFICACION NOT NULL);
COMMENT ON COLUMN PUBLIC.INFORME.DESC_LARGA IS 'descripción de lo que contiene este informe' ;
COMMENT ON COLUMN PUBLIC.INFORME.ID_PLAN IS 'planificación por defecto' ;
CREATE INDEX INFO_PLAN_FKX ON PUBLIC.INFORME( ID_PLAN ASC) ;
ALTER TABLE PUBLIC.INFORME ADD CONSTRAINT INFORME_PK PRIMARY KEY ( INFO_ID ) ;
CREATE TABLE PUBLIC.INFORME_CONSULTA( ID_CONSULTA INTEGER CONSTRAINT NNC_INNF_CONS_ID_CONSULTA NOT NULL , ID_INFORME INTEGER CONSTRAINT NNC_INNF_CONS_ID_INFORME NOT NULL , F_ULTIMA_MODIFICACION DATE DEFAULT SYSDATE CONSTRAINT NNC_INNF_CONS_F_ULT_MOD NOT NULL);
CREATE INDEX INNF_CONS_CONS_FKX ON PUBLIC.INFORME_CONSULTA( ID_CONSULTA ASC) ;
CREATE INDEX INNF_CONS_INFO_FKX ON PUBLIC.INFORME_CONSULTA( ID_INFORME ASC) ;
ALTER TABLE PUBLIC.INFORME_CONSULTA ADD CONSTRAINT INFORME_CONSULTA_PK PRIMARY KEY ( ID_CONSULTA, ID_INFORME ) ;
CREATE TABLE PUBLIC.INFORME_INFORME( ID_INFORME_CONTIENE INTEGER CONSTRAINT NNC_ID_INFORME_CONTIENE NOT NULL , ID_INFORME_CONTENIDO INTEGER CONSTRAINT NNC_ID_INFORME_CONTENIDO NOT NULL);
CREATE INDEX INF_INF_INFO_FKv1X ON PUBLIC.INFORME_INFORME( ID_INFORME_CONTIENE ASC) ;
CREATE INDEX INF_INF_INFO_FKX ON PUBLIC.INFORME_INFORME( ID_INFORME_CONTENIDO ASC) ;
ALTER TABLE PUBLIC.INFORME_INFORME ADD CONSTRAINT INFORME_INFORME_PK PRIMARY KEY ( ID_INFORME_CONTIENE, ID_INFORME_CONTENIDO ) ;
CREATE TABLE PUBLIC.INFORME_TIPO_DESTINO( ID_INFORME INTEGER CONSTRAINT NNC_INF_TIPO_DEST_ID_INFORME NOT NULL , ID_TIPO_DESTINO INTEGER CONSTRAINT NNC_INF_TIPO_DEST_ID_TI_DEST NOT NULL , POR_DEFECTO CHAR (1) CONSTRAINT NNC_INF_TIPO_DEST_POR_DEFECTO NOT NULL);
ALTER TABLE PUBLIC.INFORME_TIPO_DESTINO ADD CONSTRAINT INF_TIPO_DEST_POR_DEFECTO_CK CHECK ( POR_DEFECTO IN ('N', 'S')) ;
COMMENT ON TABLE PUBLIC.INFORME_TIPO_DESTINO IS 'Esta tabla identifica para qué tipos de destino es válido un informe. Hay consultas que son válidas en la v11 pero no en la v9, otras son cuestiones de S.O. y no de BBDD....' ;
COMMENT ON COLUMN PUBLIC.INFORME_TIPO_DESTINO.POR_DEFECTO IS 'S/N cuando se da de alta un destino ¿este informe se le debe dar de alta-planificar- por defecto?' ;
CREATE INDEX INF_TIPO_DEST_INFO_FKX ON PUBLIC.INFORME_TIPO_DESTINO( ID_INFORME ASC) ;
CREATE INDEX INF_TIPO_DEST_TIPO_DEST_FKX ON PUBLIC.INFORME_TIPO_DESTINO( ID_TIPO_DESTINO ASC) ;
ALTER TABLE PUBLIC.INFORME_TIPO_DESTINO ADD CONSTRAINT INFORME_TIPO_DESTINO_PK PRIMARY KEY ( ID_INFORME, ID_TIPO_DESTINO ) ;
CREATE TABLE PUBLIC.INF_PLAN_DEST( ID_INFORME INTEGER CONSTRAINT NNC_INF_PLAN_DEST_ID_INFORME NOT NULL , ID_CLIENTE INTEGER CONSTRAINT NNC_INF_PLAN_DEST_ID_CLIENTE NOT NULL , ID_DESTINO INTEGER CONSTRAINT NNC_INF_PLAN_DEST_ID_DESTINO NOT NULL , ID_PLAN INTEGER CONSTRAINT NNC_INF_PLAN_DEST_ID_PLAN NOT NULL , F_ULTIMA_MODIFICACION DATE DEFAULT SYSDATE CONSTRAINT NNC_INF_PLAN_DEST_F_ULT_MOD NOT NULL , F_ULTIMA_APLICACION DATE DEFAULT SYSDATE CONSTRAINT NNC_INF_PLAN_DEST_F_ULT_APLI NOT NULL);
COMMENT ON COLUMN PUBLIC.INF_PLAN_DEST.F_ULTIMA_MODIFICACION IS 'Fecha de la última modificación que ocurrío en algo de lo que depende (informe, consulta, etc.)' ;
COMMENT ON COLUMN PUBLIC.INF_PLAN_DEST.F_ULTIMA_APLICACION IS 'Fecha de la última vez que se le envió información de planificación/informe al agente y él respondió diciendo que la había cargado correctamente. Se compara con la de ultima_modificacion y si la modificación es posterior entonces hay que mandar al agente todo lo que se haya modificado ' ;
CREATE INDEX INF_PLAN_DEST_DEST_FKX ON PUBLIC.INF_PLAN_DEST( ID_CLIENTE ASC , ID_DESTINO ASC) ;
CREATE INDEX INF_PLAN_DEST_INFO_FKX ON PUBLIC.INF_PLAN_DEST( ID_INFORME ASC) ;
CREATE INDEX INF_PLAN_DEST_PLAN_FKX ON PUBLIC.INF_PLAN_DEST( ID_PLAN ASC) ;
ALTER TABLE PUBLIC.INF_PLAN_DEST ADD CONSTRAINT INF_PLAN_DEST_PK PRIMARY KEY ( ID_INFORME, ID_CLIENTE, ID_DESTINO ) ;
CREATE TABLE PUBLIC.INF_PLAN_DEST_BORRADO( ID_INFORME INTEGER NOT NULL , ID_CLIENTE INTEGER NOT NULL , ID_DESTINO INTEGER NOT NULL , ID_PLAN INTEGER NOT NULL);
ALTER TABLE PUBLIC.INF_PLAN_DEST_BORRADO ADD CONSTRAINT INF_PLAN_DEST_BORRADO_PK PRIMARY KEY ( ID_INFORME, ID_CLIENTE, ID_DESTINO, ID_PLAN ) ;
CREATE TABLE PUBLIC.LINEA_CRON( ID_LINEA_CRON INTEGER NOT NULL , ID_PLAN INTEGER NOT NULL , DESCRIPCION VARCHAR2 (2000) NOT NULL , F_ULTIMA_MODIFICACION DATE DEFAULT SYSDATE NOT NULL);
CREATE INDEX LINEA_CRON_a_PLANIFICACION_FKX ON PUBLIC.LINEA_CRON( ID_PLAN ASC) ;
ALTER TABLE PUBLIC.LINEA_CRON ADD CONSTRAINT LINEA_CRON_PK PRIMARY KEY ( ID_LINEA_CRON ) ;
CREATE TABLE PUBLIC.LOG_ERROR( FECHA DATE NOT NULL , MODULO VARCHAR2 (30) NOT NULL , CODIGO INTEGER NOT NULL , DESCRIPCION VARCHAR2 (4000));
CREATE TABLE PUBLIC.PLANIFICACION( ID_PLAN INTEGER CONSTRAINT NNC_PLAN_ID_PLAN NOT NULL , F_ULTIMA_MODIFICACION DATE DEFAULT SYSDATE NOT NULL , DESCRIPCION VARCHAR2 (4000));
ALTER TABLE PUBLIC.PLANIFICACION ADD CONSTRAINT PLANIFICACION_PK PRIMARY KEY ( ID_PLAN ) ;
CREATE TABLE PUBLIC.SNAPSHOT( ID_CLIENTE INTEGER CONSTRAINT NNC_SNAP_ID_CLIENTE NOT NULL , ID_DESTINO INTEGER CONSTRAINT NNC_SNAP_ID_DESTINO NOT NULL , ID_INFORME INTEGER CONSTRAINT NNC_SNAP_ID_INFORME NOT NULL , ID_SNAPSHOT INTEGER CONSTRAINT NNC_SNAP_ID_SNAPSHOT NOT NULL , FECHA DATE CONSTRAINT NNC_SNAP_FECHA NOT NULL);
COMMENT ON TABLE PUBLIC.SNAPSHOT IS 'Un snapshot es una instantanea que se toma con las consultas de un informe en concreto en un destino en un momento del tiempo (fecha). Para un mismo informe y destino habrá tantos snapshots como ejecuciones se hayan realizado' ;
COMMENT ON COLUMN PUBLIC.SNAPSHOT.ID_SNAPSHOT IS 'Número de snapshot, dependiente de cliente, target, informe. Lo genera el agente' ;
CREATE INDEX SNAP_INFO_FKX ON PUBLIC.SNAPSHOT( ID_INFORME ASC ) ;
CREATE INDEX SNAP_DEST_FKX ON PUBLIC.SNAPSHOT( ID_CLIENTE ASC , ID_DESTINO ASC ) ;
ALTER TABLE PUBLIC.SNAPSHOT ADD CONSTRAINT SNAPSHOT_PK PRIMARY KEY ( ID_SNAPSHOT, ID_CLIENTE, ID_DESTINO, ID_INFORME ) ;
CREATE TABLE PUBLIC.TCON_1( ID_CLIENTE INTEGER NOT NULL , ID_DESTINO INTEGER NOT NULL , ID_INFORME INTEGER NOT NULL , ID_SNAPSHOT INTEGER NOT NULL , CONS_ID INTEGER NOT NULL , DATO1 INTEGER , DATO2 INTEGER);
COMMENT ON COLUMN PUBLIC.TCON_1.ID_SNAPSHOT IS 'Número de snapshot, dependiente de cliente, target, informe. Lo genera el agente' ;
CREATE INDEX TCON_1_1_IDX ON PUBLIC.TCON_1( ID_CLIENTE ASC , ID_DESTINO ASC , CONS_ID ASC , ID_INFORME ASC , ID_SNAPSHOT ASC);
CREATE INDEX TCON_1_CONS_FKX ON PUBLIC.TCON_1( CONS_ID ASC) ;
CREATE INDEX TCON_1_SNAP_FKX ON PUBLIC.TCON_1( ID_SNAPSHOT ASC , ID_CLIENTE ASC , ID_DESTINO ASC , ID_INFORME ASC) ;
CREATE TABLE PUBLIC.TIPO_DESTINO( ID_TIPO_DESTINO INTEGER CONSTRAINT NNC_TIPO_DEST_ID_TI_DEST NOT NULL , NOMBRE_CORTO VARCHAR2 (150) CONSTRAINT NNC_TIPO_DEST_NOMBRE_CORTO NOT NULL , DESCRIPCION VARCHAR2 (2000));
ALTER TABLE PUBLIC.TIPO_DESTINO ADD CONSTRAINT TIPO_DESTINO_PK PRIMARY KEY ( ID_TIPO_DESTINO ) ;
ALTER TABLE PUBLIC.AGENTE ADD CONSTRAINT AGENTE_CLI_FK FOREIGN KEY ( ID_CLIENTE ) REFERENCES CLIENTE ( ID_CLIENTE );
ALTER TABLE PUBLIC.AGENTE_DESTINO ADD CONSTRAINT AGEN_DEST_AGENTE_FK FOREIGN KEY ( ID_AGENTE ) REFERENCES AGENTE ( AGENTE_ID );
ALTER TABLE PUBLIC.AGENTE_DESTINO ADD CONSTRAINT AGEN_DEST_DEST_FK FOREIGN KEY ( ID_CLIENTE, ID_DESTINO ) REFERENCES DESTINO ( ID_CLIENTE, ID_DESTINO );
ALTER TABLE PUBLIC.CONSULTA_TIPO_DESTINO ADD CONSTRAINT CONS_TIPO_DEST_CONS_FK FOREIGN KEY ( ID_CONSULTA ) REFERENCES CONSULTA ( CONS_ID );
ALTER TABLE PUBLIC.CONSULTA_TIPO_DESTINO ADD CONSTRAINT CONS_TIPO_DEST_TIPO_DEST_FK FOREIGN KEY ( ID_TIPO_DESTINO ) REFERENCES TIPO_DESTINO ( ID_TIPO_DESTINO );
ALTER TABLE PUBLIC.DESTINO ADD CONSTRAINT DESTINO_a_CLIENTE_FK FOREIGN KEY ( ID_CLIENTE ) REFERENCES CLIENTE ( ID_CLIENTE );
ALTER TABLE PUBLIC.INFORME_INFORME ADD CONSTRAINT INF_INF_INFO_FK FOREIGN KEY ( ID_INFORME_CONTENIDO ) REFERENCES INFORME ( INFO_ID );
ALTER TABLE PUBLIC.INFORME_INFORME ADD CONSTRAINT INF_INF_INFO_FKv1 FOREIGN KEY ( ID_INFORME_CONTIENE ) REFERENCES INFORME ( INFO_ID );
ALTER TABLE PUBLIC.INF_PLAN_DEST ADD CONSTRAINT INF_PLAN_DEST_DEST_FK FOREIGN KEY ( ID_CLIENTE, ID_DESTINO ) REFERENCES DESTINO ( ID_CLIENTE, ID_DESTINO );
ALTER TABLE PUBLIC.INF_PLAN_DEST ADD CONSTRAINT INF_PLAN_DEST_INFO_FK FOREIGN KEY ( ID_INFORME ) REFERENCES INFORME ( INFO_ID );
ALTER TABLE PUBLIC.INF_PLAN_DEST ADD CONSTRAINT INF_PLAN_DEST_PLAN_FK FOREIGN KEY ( ID_PLAN ) REFERENCES PLANIFICACION ( ID_PLAN );
ALTER TABLE PUBLIC.INFORME_TIPO_DESTINO ADD CONSTRAINT INF_TIPO_DEST_INFO_FK FOREIGN KEY ( ID_INFORME ) REFERENCES INFORME ( INFO_ID );
ALTER TABLE PUBLIC.INFORME_TIPO_DESTINO ADD CONSTRAINT INF_TIPO_DEST_TIPO_DEST_FK FOREIGN KEY ( ID_TIPO_DESTINO ) REFERENCES TIPO_DESTINO ( ID_TIPO_DESTINO );
ALTER TABLE PUBLIC.INFORME_CONSULTA ADD CONSTRAINT INNF_CONS_CONS_FK FOREIGN KEY ( ID_CONSULTA ) REFERENCES CONSULTA ( CONS_ID );
ALTER TABLE PUBLIC.INFORME_CONSULTA ADD CONSTRAINT INNF_CONS_INFO_FK FOREIGN KEY ( ID_INFORME ) REFERENCES INFORME ( INFO_ID );
ALTER TABLE PUBLIC.LINEA_CRON ADD CONSTRAINT LINEA_CRON_a_PLANIFICACION_FK FOREIGN KEY ( ID_PLAN ) REFERENCES PLANIFICACION ( ID_PLAN );
ALTER TABLE PUBLIC.SNAPSHOT ADD CONSTRAINT SNAP_DEST_FK FOREIGN KEY ( ID_CLIENTE, ID_DESTINO ) REFERENCES DESTINO ( ID_CLIENTE, ID_DESTINO );
ALTER TABLE PUBLIC.SNAPSHOT ADD CONSTRAINT SNAP_INFO_FK FOREIGN KEY ( ID_INFORME ) REFERENCES INFORME ( INFO_ID );
ALTER TABLE PUBLIC.TCON_1 ADD CONSTRAINT TCON_1_CONS_FK FOREIGN KEY ( CONS_ID ) REFERENCES CONSULTA ( CONS_ID );
ALTER TABLE PUBLIC.TCON_1 ADD CONSTRAINT TCON_1_SNAP_FK FOREIGN KEY ( ID_SNAPSHOT, ID_CLIENTE, ID_DESTINO, ID_INFORME ) REFERENCES SNAPSHOT ( ID_SNAPSHOT, ID_CLIENTE, ID_DESTINO, ID_INFORME );
CREATE SEQUENCE PUBLIC.CLI_ID_CLIENTE_SEQ START WITH 1 NOCACHE ;
CREATE SEQUENCE PUBLIC.CONS_CONS_ID_SEQ START WITH 1 NOCACHE ;
CREATE SEQUENCE PUBLIC.INFO_INFO_ID_SEQ START WITH 1 NOCACHE ;
CREATE SEQUENCE PUBLIC.LINEA_CRON_ID_LINEA_CRON_SEQ START WITH 1 NOCACHE ;
CREATE SEQUENCE PUBLIC.PLAN_ID_PLAN_SEQ START WITH 1 NOCACHE ;
CREATE SEQUENCE PUBLIC.TIPO_DEST_ID_TI_DEST_SEQ START WITH 1 NOCACHE ;
CREATE OR REPLACE TRIGGER CLI_ID_CLIENTE_TRG BEFORE INSERT ON PUBLIC.CLIENTE referencing new row as newrow FOR EACH ROW begin atomic if newrow.ID_CLIENTE IS NULL then set newrow.ID_CLIENTE = NEXT VALUE FOR PUBLIC.CLI_ID_CLIENTE_SEQ; end if; end;
CREATE OR REPLACE TRIGGER CONS_CONS_ID_TRG BEFORE INSERT ON PUBLIC.CONSULTA referencing new row as newrow FOR EACH ROW begin atomic if newrow.CONS_ID IS NULL then set newrow.CONS_ID = NEXT VALUE FOR public.CONS_CONS_ID_SEQ; end if; END;
CREATE OR REPLACE TRIGGER INFO_INFO_ID_TRG BEFORE INSERT ON public.INFORME referencing new row as newrow FOR EACH ROW begin atomic if newrow.INFO_ID is null then set newrow.INFO_ID = NEXT VALUE FOR PUBLIC.INFO_INFO_ID_SEQ; end if; END;
CREATE OR REPLACE TRIGGER LINEA_CRON_ID_LINEA_CRON_TRG BEFORE INSERT ON public.LINEA_CRON referencing new row as newrow FOR EACH ROW begin atomic if newrow.ID_LINEA_CRON is null then set newrow.ID_LINEA_CRON = NEXT VALUE FOR PUBLIC.LINEA_CRON_ID_LINEA_CRON_SEQ; end if; END;
CREATE OR REPLACE TRIGGER PLAN_ID_PLAN_TRG BEFORE INSERT ON public.PLANIFICACION referencing new row as newrow FOR EACH ROW begin atomic if newrow.ID_PLAN is null then set newrow.ID_PLAN = NEXT VALUE FOR PUBLIC.PLAN_ID_PLAN_SEQ; end if; END;
CREATE OR REPLACE TRIGGER TIPO_DEST_ID_TI_DEST_TRG BEFORE INSERT ON public.TIPO_DESTINO referencing new row as newrow FOR EACH ROW begin atomic if newrow.ID_TIPO_DESTINO is null then set newrow.ID_TIPO_DESTINO = NEXT VALUE FOR PUBLIC.TIPO_DEST_ID_TI_DEST_SEQ; end if; END;
